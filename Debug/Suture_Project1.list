
Suture_Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08001074  08001074  00002074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001168  08001168  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001168  08001168  00002168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001170  08001170  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001170  08001170  00002170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001174  08001174  00002174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001178  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          00000170  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000459  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000025c  00000000  00000000  000034d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00003738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000085  00000000  00000000  000037f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f70  00000000  00000000  0000387d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e38  00000000  00000000  000057ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000082fc  00000000  00000000  00006625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e921  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000754  00000000  00000000  0000e964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000050 	.word	0x20000050
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800105c 	.word	0x0800105c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000054 	.word	0x20000054
 80001ec:	0800105c 	.word	0x0800105c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ADC_Init_chan2>:
#define  ADC1_SMPR2         (*(volatile unsigned int*)(ADC1+0x10))
#define  ADC1_SQR          (*(volatile unsigned int*)(ADC1+0x34))
#define  ADC1_DR            (*(volatile unsigned int*)(ADC1+0x4C))

void ADC_Init_chan2(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	//Enable clock to GPIOA and ADC1 clock
	   RCC_AHB1ENR |=(1<<0);
 8000294:	4b18      	ldr	r3, [pc, #96]	@ (80002f8 <ADC_Init_chan2+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a17      	ldr	r2, [pc, #92]	@ (80002f8 <ADC_Init_chan2+0x68>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |=(1<<8);
 80002a0:	4b16      	ldr	r3, [pc, #88]	@ (80002fc <ADC_Init_chan2+0x6c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a15      	ldr	r2, [pc, #84]	@ (80002fc <ADC_Init_chan2+0x6c>)
 80002a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002aa:	6013      	str	r3, [r2, #0]
	//configure PA2 for analog intput
	GPIOA_MODER |=(3<<4);
 80002ac:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <ADC_Init_chan2+0x70>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a13      	ldr	r2, [pc, #76]	@ (8000300 <ADC_Init_chan2+0x70>)
 80002b2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002b6:	6013      	str	r3, [r2, #0]
	//set the sampling time
	ADC1_SMPR2  |= (0x7<<6);
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <ADC_Init_chan2+0x74>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <ADC_Init_chan2+0x74>)
 80002be:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 80002c2:	6013      	str	r3, [r2, #0]
	//config ADC regular sequence register channel 2
	ADC1_SQR =2;
 80002c4:	4b10      	ldr	r3, [pc, #64]	@ (8000308 <ADC_Init_chan2+0x78>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	601a      	str	r2, [r3, #0]
	//setting channel 2 i.e PA2 for continous converstion mode
	ADC1_CR2 |= (1 << 1) ;
 80002ca:	4b10      	ldr	r3, [pc, #64]	@ (800030c <ADC_Init_chan2+0x7c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a0f      	ldr	r2, [pc, #60]	@ (800030c <ADC_Init_chan2+0x7c>)
 80002d0:	f043 0302 	orr.w	r3, r3, #2
 80002d4:	6013      	str	r3, [r2, #0]
	//Enable the ADC channel 2
	ADC1_CR2 |= (1 << 0) ;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <ADC_Init_chan2+0x7c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a0c      	ldr	r2, [pc, #48]	@ (800030c <ADC_Init_chan2+0x7c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6013      	str	r3, [r2, #0]

	//Start ADC Conversion
	ADC1_CR2 |= (1 << 30) ;
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <ADC_Init_chan2+0x7c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a09      	ldr	r2, [pc, #36]	@ (800030c <ADC_Init_chan2+0x7c>)
 80002e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002ec:	6013      	str	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40023830 	.word	0x40023830
 80002fc:	40023844 	.word	0x40023844
 8000300:	40020000 	.word	0x40020000
 8000304:	40012010 	.word	0x40012010
 8000308:	40012034 	.word	0x40012034
 800030c:	40012008 	.word	0x40012008

08000310 <ADC1_Read>:
unsigned int ADC1_Read(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
while (!(ADC1_SR & (1 << 1))) ;
 8000314:	bf00      	nop
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <ADC1_Read+0x20>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <ADC1_Read+0x6>

//get the value
return ADC1_DR;
 8000322:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <ADC1_Read+0x24>)
 8000324:	681b      	ldr	r3, [r3, #0]
}
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40012000 	.word	0x40012000
 8000334:	4001204c 	.word	0x4001204c

08000338 <GPIO_Init>:


void delay(volatile int t) {
    while (t--);
}
void GPIO_Init(void) {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    RCC_AHB1ENR |= (1 << 0) | (1 << 6); // Enable GPIOA and GPIOG clocks
 800033c:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <GPIO_Init+0x58>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a13      	ldr	r2, [pc, #76]	@ (8000390 <GPIO_Init+0x58>)
 8000342:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 8000346:	6013      	str	r3, [r2, #0]

    // PA0 = Input (Button)
    GPIOA_MODER &= ~(3 << (0 * 2));
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <GPIO_Init+0x5c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a11      	ldr	r2, [pc, #68]	@ (8000394 <GPIO_Init+0x5c>)
 800034e:	f023 0303 	bic.w	r3, r3, #3
 8000352:	6013      	str	r3, [r2, #0]

    // PG13 = Output (Green LED)
    GPIOG_MODER &= ~(3 << (13 * 2));
 8000354:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <GPIO_Init+0x60>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0f      	ldr	r2, [pc, #60]	@ (8000398 <GPIO_Init+0x60>)
 800035a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800035e:	6013      	str	r3, [r2, #0]
    GPIOG_MODER |=  (1 << (13 * 2));
 8000360:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <GPIO_Init+0x60>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0c      	ldr	r2, [pc, #48]	@ (8000398 <GPIO_Init+0x60>)
 8000366:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800036a:	6013      	str	r3, [r2, #0]
    // PG13 = Output (Green LED)
       GPIOG_MODER &= ~(3 << (14 * 2));
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <GPIO_Init+0x60>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a09      	ldr	r2, [pc, #36]	@ (8000398 <GPIO_Init+0x60>)
 8000372:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000376:	6013      	str	r3, [r2, #0]
       GPIOG_MODER |=  (1 << (14 * 2));
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <GPIO_Init+0x60>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a06      	ldr	r2, [pc, #24]	@ (8000398 <GPIO_Init+0x60>)
 800037e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023830 	.word	0x40023830
 8000394:	40020000 	.word	0x40020000
 8000398:	40021800 	.word	0x40021800

0800039c <TIM2_Init>:

// TIM2 initialization for 1 ms tick
void TIM2_Init(void) {
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
    RCC_APB1ENR |= (1 << 0);     // TIM2 clock enable
 80003a0:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <TIM2_Init+0x40>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <TIM2_Init+0x40>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
    TIM2_PSC = 16000 - 1;        // 16 MHz / 16000 = 1 kHz (1 ms)
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <TIM2_Init+0x44>)
 80003ae:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003b2:	601a      	str	r2, [r3, #0]
    TIM2_ARR = 0xFFFF;           // Max auto‑reload
 80003b4:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <TIM2_Init+0x48>)
 80003b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003ba:	601a      	str	r2, [r3, #0]
    TIM2_CNT = 0;                // Reset counter
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <TIM2_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
    TIM2_CR1 |= 1;               // Enable TIM2
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6013      	str	r3, [r2, #0]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40023840 	.word	0x40023840
 80003e0:	40000028 	.word	0x40000028
 80003e4:	4000002c 	.word	0x4000002c
 80003e8:	40000024 	.word	0x40000024

080003ec <delay_ms>:

void delay_ms(uint32_t ms) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    TIM2_CNT = 0;                // Reset counter
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <delay_ms+0x28>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
    while (TIM2_CNT < ms);       // Wait until counter reaches ms
 80003fa:	bf00      	nop
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <delay_ms+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	429a      	cmp	r2, r3
 8000404:	d8fa      	bhi.n	80003fc <delay_ms+0x10>
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40000024 	.word	0x40000024

08000418 <USART1_Init>:


void USART1_Init(void) {
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
    // 1. Enable clocks
    RCC_AHB1ENR |= (1 << 0);    // GPIOAEN
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <USART1_Init+0x68>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a17      	ldr	r2, [pc, #92]	@ (8000480 <USART1_Init+0x68>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]
    RCC_APB2ENR |= (1 << 4);    // USART1EN
 8000428:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <USART1_Init+0x6c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a15      	ldr	r2, [pc, #84]	@ (8000484 <USART1_Init+0x6c>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6013      	str	r3, [r2, #0]

    // 2. Set PA9 (TX) and PA10 (RX) to alternate function mode (10)
    GPIOA_MODER &= ~((3 << (9 * 2)) | (3 << (10 * 2)));  // clear bits
 8000434:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <USART1_Init+0x70>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a13      	ldr	r2, [pc, #76]	@ (8000488 <USART1_Init+0x70>)
 800043a:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800043e:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |=  (2 << (9 * 2)) | (2 << (10 * 2));    // set AF mode
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <USART1_Init+0x70>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a10      	ldr	r2, [pc, #64]	@ (8000488 <USART1_Init+0x70>)
 8000446:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800044a:	6013      	str	r3, [r2, #0]

    // 3. Set alternate function 7 (USART1) for PA9/PA10
    GPIOA_AFRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2)));  // clear AFRH for PA9/10
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <USART1_Init+0x74>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0e      	ldr	r2, [pc, #56]	@ (800048c <USART1_Init+0x74>)
 8000452:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000456:	6013      	str	r3, [r2, #0]
    GPIOA_AFRH |=  (7 << (4 * 1)) | (7 << (4 * 2));        // AF7
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <USART1_Init+0x74>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a0b      	ldr	r2, [pc, #44]	@ (800048c <USART1_Init+0x74>)
 800045e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000462:	6013      	str	r3, [r2, #0]

    // 4. Set baud rate: assuming 16 MHz clock, 9600 baud
    // USARTDIV = 16000000 / 9600 = 1666.67 ≈ 0x0683
    USART1_BRR = 0x0683;
 8000464:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <USART1_Init+0x78>)
 8000466:	f240 6283 	movw	r2, #1667	@ 0x683
 800046a:	601a      	str	r2, [r3, #0]

    // 5. Enable USART1: UE, TE, RE
    USART1_CR1 = (1 << 13) | (1 << 3) | (1 << 2);
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <USART1_Init+0x7c>)
 800046e:	f242 020c 	movw	r2, #8204	@ 0x200c
 8000472:	601a      	str	r2, [r3, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40023830 	.word	0x40023830
 8000484:	40023844 	.word	0x40023844
 8000488:	40020000 	.word	0x40020000
 800048c:	40020024 	.word	0x40020024
 8000490:	40011008 	.word	0x40011008
 8000494:	4001100c 	.word	0x4001100c

08000498 <USART1_Write>:

void USART1_Write(char c) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
    while (!(USART1_SR & (1 << 7)));  // wait until TXE
 80004a2:	bf00      	nop
 80004a4:	4b07      	ldr	r3, [pc, #28]	@ (80004c4 <USART1_Write+0x2c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f9      	beq.n	80004a4 <USART1_Write+0xc>

    USART1_DR = c;
 80004b0:	4a05      	ldr	r2, [pc, #20]	@ (80004c8 <USART1_Write+0x30>)
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	6013      	str	r3, [r2, #0]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40011004 	.word	0x40011004

080004cc <USART1_Read>:

char USART1_Read(void) {
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
    while (!(USART1_SR & (1 << 5)));  // wait until RXNE
 80004d0:	bf00      	nop
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <USART1_Read+0x24>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f003 0320 	and.w	r3, r3, #32
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <USART1_Read+0x6>
    return (char)USART1_DR;
 80004de:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <USART1_Read+0x28>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40011000 	.word	0x40011000
 80004f4:	40011004 	.word	0x40011004

080004f8 <print_str>:

void print_str(const char *str)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000500:	e006      	b.n	8000510 <print_str+0x18>
        USART1_Write(*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ffc4 	bl	8000498 <USART1_Write>
    while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <print_str+0xa>
    }
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <main>:

int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b092      	sub	sp, #72	@ 0x48
 8000528:	af00      	add	r7, sp, #0
	char buffer[64];
    USART1_Init();
 800052a:	f7ff ff75 	bl	8000418 <USART1_Init>
    GPIO_Init();
 800052e:	f7ff ff03 	bl	8000338 <GPIO_Init>
    TIM2_Init();
 8000532:	f7ff ff33 	bl	800039c <TIM2_Init>
    ADC_Init_chan2();
 8000536:	f7ff feab 	bl	8000290 <ADC_Init_chan2>
    while (1) {

        if (GPIOA_IDR & 0x01) { // Button pressed?
 800053a:	4b40      	ldr	r3, [pc, #256]	@ (800063c <main+0x118>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <main+0x16>
            print_str("ENTER THE VALUE\r\n");
 8000546:	483e      	ldr	r0, [pc, #248]	@ (8000640 <main+0x11c>)
 8000548:	f7ff ffd6 	bl	80004f8 <print_str>

            char c = USART1_Read(); // Wait for any character
 800054c:	f7ff ffbe 	bl	80004cc <USART1_Read>
 8000550:	4603      	mov	r3, r0
 8000552:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
           // (void)c; // We don’t check what was received
            if(c=='1')
 8000556:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800055a:	2b31      	cmp	r3, #49	@ 0x31
 800055c:	d1ed      	bne.n	800053a <main+0x16>
            {
            	print_str("FRISRT MCU IS READY FOR COMMUNICATION\r\n");
 800055e:	4839      	ldr	r0, [pc, #228]	@ (8000644 <main+0x120>)
 8000560:	f7ff ffca 	bl	80004f8 <print_str>
            	 GPIOG_BSRR = (1 << 13); // Turn on Green LED
 8000564:	4b38      	ldr	r3, [pc, #224]	@ (8000648 <main+0x124>)
 8000566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800056a:	601a      	str	r2, [r3, #0]
            	 delay_ms(1000);         // Delay 1 second
 800056c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000570:	f7ff ff3c 	bl	80003ec <delay_ms>
            	GPIOG_BSRR = (1 << (13 + 16)); // Turn off Green LED
 8000574:	4b34      	ldr	r3, [pc, #208]	@ (8000648 <main+0x124>)
 8000576:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800057a:	601a      	str	r2, [r3, #0]
            	print_str("AIR FLOW INTO GLOVES\r\n");
 800057c:	4833      	ldr	r0, [pc, #204]	@ (800064c <main+0x128>)
 800057e:	f7ff ffbb 	bl	80004f8 <print_str>
            	GPIOG_BSRR = (1 << 13); // Turn on Green LED
 8000582:	4b31      	ldr	r3, [pc, #196]	@ (8000648 <main+0x124>)
 8000584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000588:	601a      	str	r2, [r3, #0]
            	delay_ms(5000);         // Delay 1 second
 800058a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800058e:	f7ff ff2d 	bl	80003ec <delay_ms>
            	GPIOG_BSRR = (1 << (13 + 16)); // Turn off Green LED
 8000592:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <main+0x124>)
 8000594:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000598:	601a      	str	r2, [r3, #0]
            	print_str("AIR FLOW IS COMPLETED\r\n");
 800059a:	482d      	ldr	r0, [pc, #180]	@ (8000650 <main+0x12c>)
 800059c:	f7ff ffac 	bl	80004f8 <print_str>
            	GPIOG_BSRR = (1 << 14 ); // Turn on red LED
 80005a0:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <main+0x124>)
 80005a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005a6:	601a      	str	r2, [r3, #0]
            	delay_ms(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f7ff ff1e 	bl	80003ec <delay_ms>
            	GPIOG_BSRR = (1 << (14 +16)); // Turn on red LED
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <main+0x124>)
 80005b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005b6:	601a      	str	r2, [r3, #0]
            	print_str("TAKE THE INITIAL READING\r\n");
 80005b8:	4826      	ldr	r0, [pc, #152]	@ (8000654 <main+0x130>)
 80005ba:	f7ff ff9d 	bl	80004f8 <print_str>
            	ADC_Val = ADC1_Read();
 80005be:	f7ff fea7 	bl	8000310 <ADC1_Read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <main+0x134>)
 80005c8:	601a      	str	r2, [r3, #0]
             //  int pressure = adc_to_pressure(ADC_Val);
            	sprintf(buffer, "Pressure: %d PSI\r\n",ADC_Val);
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <main+0x134>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	463b      	mov	r3, r7
 80005d0:	4922      	ldr	r1, [pc, #136]	@ (800065c <main+0x138>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f8aa 	bl	800072c <siprintf>
            	print_str(buffer);
 80005d8:	463b      	mov	r3, r7
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff8c 	bl	80004f8 <print_str>
            	GPIOG_BSRR = (1 << 13); // Turn on Green LED
 80005e0:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <main+0x124>)
 80005e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005e6:	601a      	str	r2, [r3, #0]
            	            	delay_ms(5000);         // Delay 1 second
 80005e8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005ec:	f7ff fefe 	bl	80003ec <delay_ms>
            	            	GPIOG_BSRR = (1 << (13 + 16)); // Turn off Green LED
 80005f0:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <main+0x124>)
 80005f2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80005f6:	601a      	str	r2, [r3, #0]
            	            	 ADC_Val1= ADC1_Read();
 80005f8:	f7ff fe8a 	bl	8000310 <ADC1_Read>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <main+0x13c>)
 8000602:	601a      	str	r2, [r3, #0]
            	//float pressure1 = adc_to_pressure(ADC_Val1);
            	sprintf(buffer, "Pressure: %d PSI\r\n", ADC_Val1);
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <main+0x13c>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	463b      	mov	r3, r7
 800060a:	4914      	ldr	r1, [pc, #80]	@ (800065c <main+0x138>)
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f88d 	bl	800072c <siprintf>
            	print_str(buffer);
 8000612:	463b      	mov	r3, r7
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff6f 	bl	80004f8 <print_str>

            	int avg = (ADC_Val+ ADC_Val) / 2;
 800061a:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <main+0x134>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40

            	if (avg>=50 ||avg <= 65)
 8000620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000622:	2b31      	cmp	r3, #49	@ 0x31
 8000624:	dc02      	bgt.n	800062c <main+0x108>
 8000626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000628:	2b41      	cmp	r3, #65	@ 0x41
 800062a:	dc03      	bgt.n	8000634 <main+0x110>
            	{
            	    print_str("Gloves is good\r\n");
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <main+0x140>)
 800062e:	f7ff ff63 	bl	80004f8 <print_str>
 8000632:	e002      	b.n	800063a <main+0x116>
            	}
            	else
            	{
            	    print_str("Gloves is bad\r\n");
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <main+0x144>)
 8000636:	f7ff ff5f 	bl	80004f8 <print_str>
        if (GPIOA_IDR & 0x01) { // Button pressed?
 800063a:	e77e      	b.n	800053a <main+0x16>
 800063c:	40020010 	.word	0x40020010
 8000640:	08001074 	.word	0x08001074
 8000644:	08001088 	.word	0x08001088
 8000648:	40021818 	.word	0x40021818
 800064c:	080010b0 	.word	0x080010b0
 8000650:	080010c8 	.word	0x080010c8
 8000654:	080010e0 	.word	0x080010e0
 8000658:	2000006c 	.word	0x2000006c
 800065c:	080010fc 	.word	0x080010fc
 8000660:	20000070 	.word	0x20000070
 8000664:	08001110 	.word	0x08001110
 8000668:	08001124 	.word	0x08001124

0800066c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000674:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <_sbrk+0x5c>)
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <_sbrk+0x60>)
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <_sbrk+0x64>)
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <_sbrk+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	d207      	bcs.n	80006ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800069c:	f000 f868 	bl	8000770 <__errno>
 80006a0:	4603      	mov	r3, r0
 80006a2:	220c      	movs	r2, #12
 80006a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	e009      	b.n	80006c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <_sbrk+0x64>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b2:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <_sbrk+0x64>)
 80006bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20030000 	.word	0x20030000
 80006cc:	00000400 	.word	0x00000400
 80006d0:	20000074 	.word	0x20000074
 80006d4:	200001c0 	.word	0x200001c0

080006d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	@ (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000706:	f000 f839 	bl	800077c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff ff0b 	bl	8000524 <main>

0800070e <LoopForever>:

LoopForever:
  b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800071c:	08001178 	.word	0x08001178
  ldr r2, =_sbss
 8000720:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000724:	200001c0 	.word	0x200001c0

08000728 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC_IRQHandler>
	...

0800072c <siprintf>:
 800072c:	b40e      	push	{r1, r2, r3}
 800072e:	b510      	push	{r4, lr}
 8000730:	b09d      	sub	sp, #116	@ 0x74
 8000732:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000734:	9002      	str	r0, [sp, #8]
 8000736:	9006      	str	r0, [sp, #24]
 8000738:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800073c:	480a      	ldr	r0, [pc, #40]	@ (8000768 <siprintf+0x3c>)
 800073e:	9107      	str	r1, [sp, #28]
 8000740:	9104      	str	r1, [sp, #16]
 8000742:	490a      	ldr	r1, [pc, #40]	@ (800076c <siprintf+0x40>)
 8000744:	f853 2b04 	ldr.w	r2, [r3], #4
 8000748:	9105      	str	r1, [sp, #20]
 800074a:	2400      	movs	r4, #0
 800074c:	a902      	add	r1, sp, #8
 800074e:	6800      	ldr	r0, [r0, #0]
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000754:	f000 f98c 	bl	8000a70 <_svfiprintf_r>
 8000758:	9b02      	ldr	r3, [sp, #8]
 800075a:	701c      	strb	r4, [r3, #0]
 800075c:	b01d      	add	sp, #116	@ 0x74
 800075e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000762:	b003      	add	sp, #12
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000
 800076c:	ffff0208 	.word	0xffff0208

08000770 <__errno>:
 8000770:	4b01      	ldr	r3, [pc, #4]	@ (8000778 <__errno+0x8>)
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000

0800077c <__libc_init_array>:
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	4d0d      	ldr	r5, [pc, #52]	@ (80007b4 <__libc_init_array+0x38>)
 8000780:	4c0d      	ldr	r4, [pc, #52]	@ (80007b8 <__libc_init_array+0x3c>)
 8000782:	1b64      	subs	r4, r4, r5
 8000784:	10a4      	asrs	r4, r4, #2
 8000786:	2600      	movs	r6, #0
 8000788:	42a6      	cmp	r6, r4
 800078a:	d109      	bne.n	80007a0 <__libc_init_array+0x24>
 800078c:	4d0b      	ldr	r5, [pc, #44]	@ (80007bc <__libc_init_array+0x40>)
 800078e:	4c0c      	ldr	r4, [pc, #48]	@ (80007c0 <__libc_init_array+0x44>)
 8000790:	f000 fc64 	bl	800105c <_init>
 8000794:	1b64      	subs	r4, r4, r5
 8000796:	10a4      	asrs	r4, r4, #2
 8000798:	2600      	movs	r6, #0
 800079a:	42a6      	cmp	r6, r4
 800079c:	d105      	bne.n	80007aa <__libc_init_array+0x2e>
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a4:	4798      	blx	r3
 80007a6:	3601      	adds	r6, #1
 80007a8:	e7ee      	b.n	8000788 <__libc_init_array+0xc>
 80007aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ae:	4798      	blx	r3
 80007b0:	3601      	adds	r6, #1
 80007b2:	e7f2      	b.n	800079a <__libc_init_array+0x1e>
 80007b4:	08001170 	.word	0x08001170
 80007b8:	08001170 	.word	0x08001170
 80007bc:	08001170 	.word	0x08001170
 80007c0:	08001174 	.word	0x08001174

080007c4 <__retarget_lock_acquire_recursive>:
 80007c4:	4770      	bx	lr

080007c6 <__retarget_lock_release_recursive>:
 80007c6:	4770      	bx	lr

080007c8 <_free_r>:
 80007c8:	b538      	push	{r3, r4, r5, lr}
 80007ca:	4605      	mov	r5, r0
 80007cc:	2900      	cmp	r1, #0
 80007ce:	d041      	beq.n	8000854 <_free_r+0x8c>
 80007d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007d4:	1f0c      	subs	r4, r1, #4
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bfb8      	it	lt
 80007da:	18e4      	addlt	r4, r4, r3
 80007dc:	f000 f8e0 	bl	80009a0 <__malloc_lock>
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <_free_r+0x90>)
 80007e2:	6813      	ldr	r3, [r2, #0]
 80007e4:	b933      	cbnz	r3, 80007f4 <_free_r+0x2c>
 80007e6:	6063      	str	r3, [r4, #4]
 80007e8:	6014      	str	r4, [r2, #0]
 80007ea:	4628      	mov	r0, r5
 80007ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80007f0:	f000 b8dc 	b.w	80009ac <__malloc_unlock>
 80007f4:	42a3      	cmp	r3, r4
 80007f6:	d908      	bls.n	800080a <_free_r+0x42>
 80007f8:	6820      	ldr	r0, [r4, #0]
 80007fa:	1821      	adds	r1, r4, r0
 80007fc:	428b      	cmp	r3, r1
 80007fe:	bf01      	itttt	eq
 8000800:	6819      	ldreq	r1, [r3, #0]
 8000802:	685b      	ldreq	r3, [r3, #4]
 8000804:	1809      	addeq	r1, r1, r0
 8000806:	6021      	streq	r1, [r4, #0]
 8000808:	e7ed      	b.n	80007e6 <_free_r+0x1e>
 800080a:	461a      	mov	r2, r3
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	b10b      	cbz	r3, 8000814 <_free_r+0x4c>
 8000810:	42a3      	cmp	r3, r4
 8000812:	d9fa      	bls.n	800080a <_free_r+0x42>
 8000814:	6811      	ldr	r1, [r2, #0]
 8000816:	1850      	adds	r0, r2, r1
 8000818:	42a0      	cmp	r0, r4
 800081a:	d10b      	bne.n	8000834 <_free_r+0x6c>
 800081c:	6820      	ldr	r0, [r4, #0]
 800081e:	4401      	add	r1, r0
 8000820:	1850      	adds	r0, r2, r1
 8000822:	4283      	cmp	r3, r0
 8000824:	6011      	str	r1, [r2, #0]
 8000826:	d1e0      	bne.n	80007ea <_free_r+0x22>
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	6053      	str	r3, [r2, #4]
 800082e:	4408      	add	r0, r1
 8000830:	6010      	str	r0, [r2, #0]
 8000832:	e7da      	b.n	80007ea <_free_r+0x22>
 8000834:	d902      	bls.n	800083c <_free_r+0x74>
 8000836:	230c      	movs	r3, #12
 8000838:	602b      	str	r3, [r5, #0]
 800083a:	e7d6      	b.n	80007ea <_free_r+0x22>
 800083c:	6820      	ldr	r0, [r4, #0]
 800083e:	1821      	adds	r1, r4, r0
 8000840:	428b      	cmp	r3, r1
 8000842:	bf04      	itt	eq
 8000844:	6819      	ldreq	r1, [r3, #0]
 8000846:	685b      	ldreq	r3, [r3, #4]
 8000848:	6063      	str	r3, [r4, #4]
 800084a:	bf04      	itt	eq
 800084c:	1809      	addeq	r1, r1, r0
 800084e:	6021      	streq	r1, [r4, #0]
 8000850:	6054      	str	r4, [r2, #4]
 8000852:	e7ca      	b.n	80007ea <_free_r+0x22>
 8000854:	bd38      	pop	{r3, r4, r5, pc}
 8000856:	bf00      	nop
 8000858:	200001bc 	.word	0x200001bc

0800085c <sbrk_aligned>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	4e0f      	ldr	r6, [pc, #60]	@ (800089c <sbrk_aligned+0x40>)
 8000860:	460c      	mov	r4, r1
 8000862:	6831      	ldr	r1, [r6, #0]
 8000864:	4605      	mov	r5, r0
 8000866:	b911      	cbnz	r1, 800086e <sbrk_aligned+0x12>
 8000868:	f000 fba4 	bl	8000fb4 <_sbrk_r>
 800086c:	6030      	str	r0, [r6, #0]
 800086e:	4621      	mov	r1, r4
 8000870:	4628      	mov	r0, r5
 8000872:	f000 fb9f 	bl	8000fb4 <_sbrk_r>
 8000876:	1c43      	adds	r3, r0, #1
 8000878:	d103      	bne.n	8000882 <sbrk_aligned+0x26>
 800087a:	f04f 34ff 	mov.w	r4, #4294967295
 800087e:	4620      	mov	r0, r4
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	1cc4      	adds	r4, r0, #3
 8000884:	f024 0403 	bic.w	r4, r4, #3
 8000888:	42a0      	cmp	r0, r4
 800088a:	d0f8      	beq.n	800087e <sbrk_aligned+0x22>
 800088c:	1a21      	subs	r1, r4, r0
 800088e:	4628      	mov	r0, r5
 8000890:	f000 fb90 	bl	8000fb4 <_sbrk_r>
 8000894:	3001      	adds	r0, #1
 8000896:	d1f2      	bne.n	800087e <sbrk_aligned+0x22>
 8000898:	e7ef      	b.n	800087a <sbrk_aligned+0x1e>
 800089a:	bf00      	nop
 800089c:	200001b8 	.word	0x200001b8

080008a0 <_malloc_r>:
 80008a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008a4:	1ccd      	adds	r5, r1, #3
 80008a6:	f025 0503 	bic.w	r5, r5, #3
 80008aa:	3508      	adds	r5, #8
 80008ac:	2d0c      	cmp	r5, #12
 80008ae:	bf38      	it	cc
 80008b0:	250c      	movcc	r5, #12
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	4606      	mov	r6, r0
 80008b6:	db01      	blt.n	80008bc <_malloc_r+0x1c>
 80008b8:	42a9      	cmp	r1, r5
 80008ba:	d904      	bls.n	80008c6 <_malloc_r+0x26>
 80008bc:	230c      	movs	r3, #12
 80008be:	6033      	str	r3, [r6, #0]
 80008c0:	2000      	movs	r0, #0
 80008c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800099c <_malloc_r+0xfc>
 80008ca:	f000 f869 	bl	80009a0 <__malloc_lock>
 80008ce:	f8d8 3000 	ldr.w	r3, [r8]
 80008d2:	461c      	mov	r4, r3
 80008d4:	bb44      	cbnz	r4, 8000928 <_malloc_r+0x88>
 80008d6:	4629      	mov	r1, r5
 80008d8:	4630      	mov	r0, r6
 80008da:	f7ff ffbf 	bl	800085c <sbrk_aligned>
 80008de:	1c43      	adds	r3, r0, #1
 80008e0:	4604      	mov	r4, r0
 80008e2:	d158      	bne.n	8000996 <_malloc_r+0xf6>
 80008e4:	f8d8 4000 	ldr.w	r4, [r8]
 80008e8:	4627      	mov	r7, r4
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d143      	bne.n	8000976 <_malloc_r+0xd6>
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d04b      	beq.n	800098a <_malloc_r+0xea>
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	4639      	mov	r1, r7
 80008f6:	4630      	mov	r0, r6
 80008f8:	eb04 0903 	add.w	r9, r4, r3
 80008fc:	f000 fb5a 	bl	8000fb4 <_sbrk_r>
 8000900:	4581      	cmp	r9, r0
 8000902:	d142      	bne.n	800098a <_malloc_r+0xea>
 8000904:	6821      	ldr	r1, [r4, #0]
 8000906:	1a6d      	subs	r5, r5, r1
 8000908:	4629      	mov	r1, r5
 800090a:	4630      	mov	r0, r6
 800090c:	f7ff ffa6 	bl	800085c <sbrk_aligned>
 8000910:	3001      	adds	r0, #1
 8000912:	d03a      	beq.n	800098a <_malloc_r+0xea>
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	442b      	add	r3, r5
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	f8d8 3000 	ldr.w	r3, [r8]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	bb62      	cbnz	r2, 800097c <_malloc_r+0xdc>
 8000922:	f8c8 7000 	str.w	r7, [r8]
 8000926:	e00f      	b.n	8000948 <_malloc_r+0xa8>
 8000928:	6822      	ldr	r2, [r4, #0]
 800092a:	1b52      	subs	r2, r2, r5
 800092c:	d420      	bmi.n	8000970 <_malloc_r+0xd0>
 800092e:	2a0b      	cmp	r2, #11
 8000930:	d917      	bls.n	8000962 <_malloc_r+0xc2>
 8000932:	1961      	adds	r1, r4, r5
 8000934:	42a3      	cmp	r3, r4
 8000936:	6025      	str	r5, [r4, #0]
 8000938:	bf18      	it	ne
 800093a:	6059      	strne	r1, [r3, #4]
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	bf08      	it	eq
 8000940:	f8c8 1000 	streq.w	r1, [r8]
 8000944:	5162      	str	r2, [r4, r5]
 8000946:	604b      	str	r3, [r1, #4]
 8000948:	4630      	mov	r0, r6
 800094a:	f000 f82f 	bl	80009ac <__malloc_unlock>
 800094e:	f104 000b 	add.w	r0, r4, #11
 8000952:	1d23      	adds	r3, r4, #4
 8000954:	f020 0007 	bic.w	r0, r0, #7
 8000958:	1ac2      	subs	r2, r0, r3
 800095a:	bf1c      	itt	ne
 800095c:	1a1b      	subne	r3, r3, r0
 800095e:	50a3      	strne	r3, [r4, r2]
 8000960:	e7af      	b.n	80008c2 <_malloc_r+0x22>
 8000962:	6862      	ldr	r2, [r4, #4]
 8000964:	42a3      	cmp	r3, r4
 8000966:	bf0c      	ite	eq
 8000968:	f8c8 2000 	streq.w	r2, [r8]
 800096c:	605a      	strne	r2, [r3, #4]
 800096e:	e7eb      	b.n	8000948 <_malloc_r+0xa8>
 8000970:	4623      	mov	r3, r4
 8000972:	6864      	ldr	r4, [r4, #4]
 8000974:	e7ae      	b.n	80008d4 <_malloc_r+0x34>
 8000976:	463c      	mov	r4, r7
 8000978:	687f      	ldr	r7, [r7, #4]
 800097a:	e7b6      	b.n	80008ea <_malloc_r+0x4a>
 800097c:	461a      	mov	r2, r3
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	42a3      	cmp	r3, r4
 8000982:	d1fb      	bne.n	800097c <_malloc_r+0xdc>
 8000984:	2300      	movs	r3, #0
 8000986:	6053      	str	r3, [r2, #4]
 8000988:	e7de      	b.n	8000948 <_malloc_r+0xa8>
 800098a:	230c      	movs	r3, #12
 800098c:	6033      	str	r3, [r6, #0]
 800098e:	4630      	mov	r0, r6
 8000990:	f000 f80c 	bl	80009ac <__malloc_unlock>
 8000994:	e794      	b.n	80008c0 <_malloc_r+0x20>
 8000996:	6005      	str	r5, [r0, #0]
 8000998:	e7d6      	b.n	8000948 <_malloc_r+0xa8>
 800099a:	bf00      	nop
 800099c:	200001bc 	.word	0x200001bc

080009a0 <__malloc_lock>:
 80009a0:	4801      	ldr	r0, [pc, #4]	@ (80009a8 <__malloc_lock+0x8>)
 80009a2:	f7ff bf0f 	b.w	80007c4 <__retarget_lock_acquire_recursive>
 80009a6:	bf00      	nop
 80009a8:	200001b4 	.word	0x200001b4

080009ac <__malloc_unlock>:
 80009ac:	4801      	ldr	r0, [pc, #4]	@ (80009b4 <__malloc_unlock+0x8>)
 80009ae:	f7ff bf0a 	b.w	80007c6 <__retarget_lock_release_recursive>
 80009b2:	bf00      	nop
 80009b4:	200001b4 	.word	0x200001b4

080009b8 <__ssputs_r>:
 80009b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009bc:	688e      	ldr	r6, [r1, #8]
 80009be:	461f      	mov	r7, r3
 80009c0:	42be      	cmp	r6, r7
 80009c2:	680b      	ldr	r3, [r1, #0]
 80009c4:	4682      	mov	sl, r0
 80009c6:	460c      	mov	r4, r1
 80009c8:	4690      	mov	r8, r2
 80009ca:	d82d      	bhi.n	8000a28 <__ssputs_r+0x70>
 80009cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009d4:	d026      	beq.n	8000a24 <__ssputs_r+0x6c>
 80009d6:	6965      	ldr	r5, [r4, #20]
 80009d8:	6909      	ldr	r1, [r1, #16]
 80009da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009de:	eba3 0901 	sub.w	r9, r3, r1
 80009e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009e6:	1c7b      	adds	r3, r7, #1
 80009e8:	444b      	add	r3, r9
 80009ea:	106d      	asrs	r5, r5, #1
 80009ec:	429d      	cmp	r5, r3
 80009ee:	bf38      	it	cc
 80009f0:	461d      	movcc	r5, r3
 80009f2:	0553      	lsls	r3, r2, #21
 80009f4:	d527      	bpl.n	8000a46 <__ssputs_r+0x8e>
 80009f6:	4629      	mov	r1, r5
 80009f8:	f7ff ff52 	bl	80008a0 <_malloc_r>
 80009fc:	4606      	mov	r6, r0
 80009fe:	b360      	cbz	r0, 8000a5a <__ssputs_r+0xa2>
 8000a00:	6921      	ldr	r1, [r4, #16]
 8000a02:	464a      	mov	r2, r9
 8000a04:	f000 fae6 	bl	8000fd4 <memcpy>
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a12:	81a3      	strh	r3, [r4, #12]
 8000a14:	6126      	str	r6, [r4, #16]
 8000a16:	6165      	str	r5, [r4, #20]
 8000a18:	444e      	add	r6, r9
 8000a1a:	eba5 0509 	sub.w	r5, r5, r9
 8000a1e:	6026      	str	r6, [r4, #0]
 8000a20:	60a5      	str	r5, [r4, #8]
 8000a22:	463e      	mov	r6, r7
 8000a24:	42be      	cmp	r6, r7
 8000a26:	d900      	bls.n	8000a2a <__ssputs_r+0x72>
 8000a28:	463e      	mov	r6, r7
 8000a2a:	6820      	ldr	r0, [r4, #0]
 8000a2c:	4632      	mov	r2, r6
 8000a2e:	4641      	mov	r1, r8
 8000a30:	f000 faa6 	bl	8000f80 <memmove>
 8000a34:	68a3      	ldr	r3, [r4, #8]
 8000a36:	1b9b      	subs	r3, r3, r6
 8000a38:	60a3      	str	r3, [r4, #8]
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	4433      	add	r3, r6
 8000a3e:	6023      	str	r3, [r4, #0]
 8000a40:	2000      	movs	r0, #0
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	462a      	mov	r2, r5
 8000a48:	f000 fad2 	bl	8000ff0 <_realloc_r>
 8000a4c:	4606      	mov	r6, r0
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d1e0      	bne.n	8000a14 <__ssputs_r+0x5c>
 8000a52:	6921      	ldr	r1, [r4, #16]
 8000a54:	4650      	mov	r0, sl
 8000a56:	f7ff feb7 	bl	80007c8 <_free_r>
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	f8ca 3000 	str.w	r3, [sl]
 8000a60:	89a3      	ldrh	r3, [r4, #12]
 8000a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a66:	81a3      	strh	r3, [r4, #12]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	e7e9      	b.n	8000a42 <__ssputs_r+0x8a>
	...

08000a70 <_svfiprintf_r>:
 8000a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a74:	4698      	mov	r8, r3
 8000a76:	898b      	ldrh	r3, [r1, #12]
 8000a78:	061b      	lsls	r3, r3, #24
 8000a7a:	b09d      	sub	sp, #116	@ 0x74
 8000a7c:	4607      	mov	r7, r0
 8000a7e:	460d      	mov	r5, r1
 8000a80:	4614      	mov	r4, r2
 8000a82:	d510      	bpl.n	8000aa6 <_svfiprintf_r+0x36>
 8000a84:	690b      	ldr	r3, [r1, #16]
 8000a86:	b973      	cbnz	r3, 8000aa6 <_svfiprintf_r+0x36>
 8000a88:	2140      	movs	r1, #64	@ 0x40
 8000a8a:	f7ff ff09 	bl	80008a0 <_malloc_r>
 8000a8e:	6028      	str	r0, [r5, #0]
 8000a90:	6128      	str	r0, [r5, #16]
 8000a92:	b930      	cbnz	r0, 8000aa2 <_svfiprintf_r+0x32>
 8000a94:	230c      	movs	r3, #12
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	b01d      	add	sp, #116	@ 0x74
 8000a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aa2:	2340      	movs	r3, #64	@ 0x40
 8000aa4:	616b      	str	r3, [r5, #20]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000aaa:	2320      	movs	r3, #32
 8000aac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ab4:	2330      	movs	r3, #48	@ 0x30
 8000ab6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c54 <_svfiprintf_r+0x1e4>
 8000aba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000abe:	f04f 0901 	mov.w	r9, #1
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	469a      	mov	sl, r3
 8000ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000aca:	b10a      	cbz	r2, 8000ad0 <_svfiprintf_r+0x60>
 8000acc:	2a25      	cmp	r2, #37	@ 0x25
 8000ace:	d1f9      	bne.n	8000ac4 <_svfiprintf_r+0x54>
 8000ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8000ad4:	d00b      	beq.n	8000aee <_svfiprintf_r+0x7e>
 8000ad6:	465b      	mov	r3, fp
 8000ad8:	4622      	mov	r2, r4
 8000ada:	4629      	mov	r1, r5
 8000adc:	4638      	mov	r0, r7
 8000ade:	f7ff ff6b 	bl	80009b8 <__ssputs_r>
 8000ae2:	3001      	adds	r0, #1
 8000ae4:	f000 80a7 	beq.w	8000c36 <_svfiprintf_r+0x1c6>
 8000ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000aea:	445a      	add	r2, fp
 8000aec:	9209      	str	r2, [sp, #36]	@ 0x24
 8000aee:	f89a 3000 	ldrb.w	r3, [sl]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 809f 	beq.w	8000c36 <_svfiprintf_r+0x1c6>
 8000af8:	2300      	movs	r3, #0
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b02:	f10a 0a01 	add.w	sl, sl, #1
 8000b06:	9304      	str	r3, [sp, #16]
 8000b08:	9307      	str	r3, [sp, #28]
 8000b0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b10:	4654      	mov	r4, sl
 8000b12:	2205      	movs	r2, #5
 8000b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b18:	484e      	ldr	r0, [pc, #312]	@ (8000c54 <_svfiprintf_r+0x1e4>)
 8000b1a:	f7ff fb69 	bl	80001f0 <memchr>
 8000b1e:	9a04      	ldr	r2, [sp, #16]
 8000b20:	b9d8      	cbnz	r0, 8000b5a <_svfiprintf_r+0xea>
 8000b22:	06d0      	lsls	r0, r2, #27
 8000b24:	bf44      	itt	mi
 8000b26:	2320      	movmi	r3, #32
 8000b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b2c:	0711      	lsls	r1, r2, #28
 8000b2e:	bf44      	itt	mi
 8000b30:	232b      	movmi	r3, #43	@ 0x2b
 8000b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b36:	f89a 3000 	ldrb.w	r3, [sl]
 8000b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b3c:	d015      	beq.n	8000b6a <_svfiprintf_r+0xfa>
 8000b3e:	9a07      	ldr	r2, [sp, #28]
 8000b40:	4654      	mov	r4, sl
 8000b42:	2000      	movs	r0, #0
 8000b44:	f04f 0c0a 	mov.w	ip, #10
 8000b48:	4621      	mov	r1, r4
 8000b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b4e:	3b30      	subs	r3, #48	@ 0x30
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d94b      	bls.n	8000bec <_svfiprintf_r+0x17c>
 8000b54:	b1b0      	cbz	r0, 8000b84 <_svfiprintf_r+0x114>
 8000b56:	9207      	str	r2, [sp, #28]
 8000b58:	e014      	b.n	8000b84 <_svfiprintf_r+0x114>
 8000b5a:	eba0 0308 	sub.w	r3, r0, r8
 8000b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	9304      	str	r3, [sp, #16]
 8000b66:	46a2      	mov	sl, r4
 8000b68:	e7d2      	b.n	8000b10 <_svfiprintf_r+0xa0>
 8000b6a:	9b03      	ldr	r3, [sp, #12]
 8000b6c:	1d19      	adds	r1, r3, #4
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	9103      	str	r1, [sp, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bfbb      	ittet	lt
 8000b76:	425b      	neglt	r3, r3
 8000b78:	f042 0202 	orrlt.w	r2, r2, #2
 8000b7c:	9307      	strge	r3, [sp, #28]
 8000b7e:	9307      	strlt	r3, [sp, #28]
 8000b80:	bfb8      	it	lt
 8000b82:	9204      	strlt	r2, [sp, #16]
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b88:	d10a      	bne.n	8000ba0 <_svfiprintf_r+0x130>
 8000b8a:	7863      	ldrb	r3, [r4, #1]
 8000b8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b8e:	d132      	bne.n	8000bf6 <_svfiprintf_r+0x186>
 8000b90:	9b03      	ldr	r3, [sp, #12]
 8000b92:	1d1a      	adds	r2, r3, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	9203      	str	r2, [sp, #12]
 8000b98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b9c:	3402      	adds	r4, #2
 8000b9e:	9305      	str	r3, [sp, #20]
 8000ba0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c64 <_svfiprintf_r+0x1f4>
 8000ba4:	7821      	ldrb	r1, [r4, #0]
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	4650      	mov	r0, sl
 8000baa:	f7ff fb21 	bl	80001f0 <memchr>
 8000bae:	b138      	cbz	r0, 8000bc0 <_svfiprintf_r+0x150>
 8000bb0:	9b04      	ldr	r3, [sp, #16]
 8000bb2:	eba0 000a 	sub.w	r0, r0, sl
 8000bb6:	2240      	movs	r2, #64	@ 0x40
 8000bb8:	4082      	lsls	r2, r0
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	3401      	adds	r4, #1
 8000bbe:	9304      	str	r3, [sp, #16]
 8000bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bc4:	4824      	ldr	r0, [pc, #144]	@ (8000c58 <_svfiprintf_r+0x1e8>)
 8000bc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bca:	2206      	movs	r2, #6
 8000bcc:	f7ff fb10 	bl	80001f0 <memchr>
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d036      	beq.n	8000c42 <_svfiprintf_r+0x1d2>
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <_svfiprintf_r+0x1ec>)
 8000bd6:	bb1b      	cbnz	r3, 8000c20 <_svfiprintf_r+0x1b0>
 8000bd8:	9b03      	ldr	r3, [sp, #12]
 8000bda:	3307      	adds	r3, #7
 8000bdc:	f023 0307 	bic.w	r3, r3, #7
 8000be0:	3308      	adds	r3, #8
 8000be2:	9303      	str	r3, [sp, #12]
 8000be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000be6:	4433      	add	r3, r6
 8000be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bea:	e76a      	b.n	8000ac2 <_svfiprintf_r+0x52>
 8000bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bf0:	460c      	mov	r4, r1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	e7a8      	b.n	8000b48 <_svfiprintf_r+0xd8>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	3401      	adds	r4, #1
 8000bfa:	9305      	str	r3, [sp, #20]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 0c0a 	mov.w	ip, #10
 8000c02:	4620      	mov	r0, r4
 8000c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c08:	3a30      	subs	r2, #48	@ 0x30
 8000c0a:	2a09      	cmp	r2, #9
 8000c0c:	d903      	bls.n	8000c16 <_svfiprintf_r+0x1a6>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0c6      	beq.n	8000ba0 <_svfiprintf_r+0x130>
 8000c12:	9105      	str	r1, [sp, #20]
 8000c14:	e7c4      	b.n	8000ba0 <_svfiprintf_r+0x130>
 8000c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e7f0      	b.n	8000c02 <_svfiprintf_r+0x192>
 8000c20:	ab03      	add	r3, sp, #12
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	462a      	mov	r2, r5
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <_svfiprintf_r+0x1f0>)
 8000c28:	a904      	add	r1, sp, #16
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	f3af 8000 	nop.w
 8000c30:	1c42      	adds	r2, r0, #1
 8000c32:	4606      	mov	r6, r0
 8000c34:	d1d6      	bne.n	8000be4 <_svfiprintf_r+0x174>
 8000c36:	89ab      	ldrh	r3, [r5, #12]
 8000c38:	065b      	lsls	r3, r3, #25
 8000c3a:	f53f af2d 	bmi.w	8000a98 <_svfiprintf_r+0x28>
 8000c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c40:	e72c      	b.n	8000a9c <_svfiprintf_r+0x2c>
 8000c42:	ab03      	add	r3, sp, #12
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	462a      	mov	r2, r5
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <_svfiprintf_r+0x1f0>)
 8000c4a:	a904      	add	r1, sp, #16
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	f000 f879 	bl	8000d44 <_printf_i>
 8000c52:	e7ed      	b.n	8000c30 <_svfiprintf_r+0x1c0>
 8000c54:	08001134 	.word	0x08001134
 8000c58:	0800113e 	.word	0x0800113e
 8000c5c:	00000000 	.word	0x00000000
 8000c60:	080009b9 	.word	0x080009b9
 8000c64:	0800113a 	.word	0x0800113a

08000c68 <_printf_common>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	4616      	mov	r6, r2
 8000c6e:	4698      	mov	r8, r3
 8000c70:	688a      	ldr	r2, [r1, #8]
 8000c72:	690b      	ldr	r3, [r1, #16]
 8000c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	bfb8      	it	lt
 8000c7c:	4613      	movlt	r3, r2
 8000c7e:	6033      	str	r3, [r6, #0]
 8000c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c84:	4607      	mov	r7, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	b10a      	cbz	r2, 8000c8e <_printf_common+0x26>
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	6033      	str	r3, [r6, #0]
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	0699      	lsls	r1, r3, #26
 8000c92:	bf42      	ittt	mi
 8000c94:	6833      	ldrmi	r3, [r6, #0]
 8000c96:	3302      	addmi	r3, #2
 8000c98:	6033      	strmi	r3, [r6, #0]
 8000c9a:	6825      	ldr	r5, [r4, #0]
 8000c9c:	f015 0506 	ands.w	r5, r5, #6
 8000ca0:	d106      	bne.n	8000cb0 <_printf_common+0x48>
 8000ca2:	f104 0a19 	add.w	sl, r4, #25
 8000ca6:	68e3      	ldr	r3, [r4, #12]
 8000ca8:	6832      	ldr	r2, [r6, #0]
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	dc26      	bgt.n	8000cfe <_printf_common+0x96>
 8000cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cb4:	6822      	ldr	r2, [r4, #0]
 8000cb6:	3b00      	subs	r3, #0
 8000cb8:	bf18      	it	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	0692      	lsls	r2, r2, #26
 8000cbe:	d42b      	bmi.n	8000d18 <_printf_common+0xb0>
 8000cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cc4:	4641      	mov	r1, r8
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	47c8      	blx	r9
 8000cca:	3001      	adds	r0, #1
 8000ccc:	d01e      	beq.n	8000d0c <_printf_common+0xa4>
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	6922      	ldr	r2, [r4, #16]
 8000cd2:	f003 0306 	and.w	r3, r3, #6
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf02      	ittt	eq
 8000cda:	68e5      	ldreq	r5, [r4, #12]
 8000cdc:	6833      	ldreq	r3, [r6, #0]
 8000cde:	1aed      	subeq	r5, r5, r3
 8000ce0:	68a3      	ldr	r3, [r4, #8]
 8000ce2:	bf0c      	ite	eq
 8000ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ce8:	2500      	movne	r5, #0
 8000cea:	4293      	cmp	r3, r2
 8000cec:	bfc4      	itt	gt
 8000cee:	1a9b      	subgt	r3, r3, r2
 8000cf0:	18ed      	addgt	r5, r5, r3
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	341a      	adds	r4, #26
 8000cf6:	42b5      	cmp	r5, r6
 8000cf8:	d11a      	bne.n	8000d30 <_printf_common+0xc8>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	e008      	b.n	8000d10 <_printf_common+0xa8>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4652      	mov	r2, sl
 8000d02:	4641      	mov	r1, r8
 8000d04:	4638      	mov	r0, r7
 8000d06:	47c8      	blx	r9
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d103      	bne.n	8000d14 <_printf_common+0xac>
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	3501      	adds	r5, #1
 8000d16:	e7c6      	b.n	8000ca6 <_printf_common+0x3e>
 8000d18:	18e1      	adds	r1, r4, r3
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	2030      	movs	r0, #48	@ 0x30
 8000d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d22:	4422      	add	r2, r4
 8000d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	e7c7      	b.n	8000cc0 <_printf_common+0x58>
 8000d30:	2301      	movs	r3, #1
 8000d32:	4622      	mov	r2, r4
 8000d34:	4641      	mov	r1, r8
 8000d36:	4638      	mov	r0, r7
 8000d38:	47c8      	blx	r9
 8000d3a:	3001      	adds	r0, #1
 8000d3c:	d0e6      	beq.n	8000d0c <_printf_common+0xa4>
 8000d3e:	3601      	adds	r6, #1
 8000d40:	e7d9      	b.n	8000cf6 <_printf_common+0x8e>
	...

08000d44 <_printf_i>:
 8000d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	7e0f      	ldrb	r7, [r1, #24]
 8000d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d4c:	2f78      	cmp	r7, #120	@ 0x78
 8000d4e:	4691      	mov	r9, r2
 8000d50:	4680      	mov	r8, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	469a      	mov	sl, r3
 8000d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d5a:	d807      	bhi.n	8000d6c <_printf_i+0x28>
 8000d5c:	2f62      	cmp	r7, #98	@ 0x62
 8000d5e:	d80a      	bhi.n	8000d76 <_printf_i+0x32>
 8000d60:	2f00      	cmp	r7, #0
 8000d62:	f000 80d1 	beq.w	8000f08 <_printf_i+0x1c4>
 8000d66:	2f58      	cmp	r7, #88	@ 0x58
 8000d68:	f000 80b8 	beq.w	8000edc <_printf_i+0x198>
 8000d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d74:	e03a      	b.n	8000dec <_printf_i+0xa8>
 8000d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d7a:	2b15      	cmp	r3, #21
 8000d7c:	d8f6      	bhi.n	8000d6c <_printf_i+0x28>
 8000d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8000d84 <_printf_i+0x40>)
 8000d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d84:	08000ddd 	.word	0x08000ddd
 8000d88:	08000df1 	.word	0x08000df1
 8000d8c:	08000d6d 	.word	0x08000d6d
 8000d90:	08000d6d 	.word	0x08000d6d
 8000d94:	08000d6d 	.word	0x08000d6d
 8000d98:	08000d6d 	.word	0x08000d6d
 8000d9c:	08000df1 	.word	0x08000df1
 8000da0:	08000d6d 	.word	0x08000d6d
 8000da4:	08000d6d 	.word	0x08000d6d
 8000da8:	08000d6d 	.word	0x08000d6d
 8000dac:	08000d6d 	.word	0x08000d6d
 8000db0:	08000eef 	.word	0x08000eef
 8000db4:	08000e1b 	.word	0x08000e1b
 8000db8:	08000ea9 	.word	0x08000ea9
 8000dbc:	08000d6d 	.word	0x08000d6d
 8000dc0:	08000d6d 	.word	0x08000d6d
 8000dc4:	08000f11 	.word	0x08000f11
 8000dc8:	08000d6d 	.word	0x08000d6d
 8000dcc:	08000e1b 	.word	0x08000e1b
 8000dd0:	08000d6d 	.word	0x08000d6d
 8000dd4:	08000d6d 	.word	0x08000d6d
 8000dd8:	08000eb1 	.word	0x08000eb1
 8000ddc:	6833      	ldr	r3, [r6, #0]
 8000dde:	1d1a      	adds	r2, r3, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6032      	str	r2, [r6, #0]
 8000de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000dec:	2301      	movs	r3, #1
 8000dee:	e09c      	b.n	8000f2a <_printf_i+0x1e6>
 8000df0:	6833      	ldr	r3, [r6, #0]
 8000df2:	6820      	ldr	r0, [r4, #0]
 8000df4:	1d19      	adds	r1, r3, #4
 8000df6:	6031      	str	r1, [r6, #0]
 8000df8:	0606      	lsls	r6, r0, #24
 8000dfa:	d501      	bpl.n	8000e00 <_printf_i+0xbc>
 8000dfc:	681d      	ldr	r5, [r3, #0]
 8000dfe:	e003      	b.n	8000e08 <_printf_i+0xc4>
 8000e00:	0645      	lsls	r5, r0, #25
 8000e02:	d5fb      	bpl.n	8000dfc <_printf_i+0xb8>
 8000e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	da03      	bge.n	8000e14 <_printf_i+0xd0>
 8000e0c:	232d      	movs	r3, #45	@ 0x2d
 8000e0e:	426d      	negs	r5, r5
 8000e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e14:	4858      	ldr	r0, [pc, #352]	@ (8000f78 <_printf_i+0x234>)
 8000e16:	230a      	movs	r3, #10
 8000e18:	e011      	b.n	8000e3e <_printf_i+0xfa>
 8000e1a:	6821      	ldr	r1, [r4, #0]
 8000e1c:	6833      	ldr	r3, [r6, #0]
 8000e1e:	0608      	lsls	r0, r1, #24
 8000e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e24:	d402      	bmi.n	8000e2c <_printf_i+0xe8>
 8000e26:	0649      	lsls	r1, r1, #25
 8000e28:	bf48      	it	mi
 8000e2a:	b2ad      	uxthmi	r5, r5
 8000e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e2e:	4852      	ldr	r0, [pc, #328]	@ (8000f78 <_printf_i+0x234>)
 8000e30:	6033      	str	r3, [r6, #0]
 8000e32:	bf14      	ite	ne
 8000e34:	230a      	movne	r3, #10
 8000e36:	2308      	moveq	r3, #8
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e3e:	6866      	ldr	r6, [r4, #4]
 8000e40:	60a6      	str	r6, [r4, #8]
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	db05      	blt.n	8000e52 <_printf_i+0x10e>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	432e      	orrs	r6, r5
 8000e4a:	f021 0104 	bic.w	r1, r1, #4
 8000e4e:	6021      	str	r1, [r4, #0]
 8000e50:	d04b      	beq.n	8000eea <_printf_i+0x1a6>
 8000e52:	4616      	mov	r6, r2
 8000e54:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e58:	fb03 5711 	mls	r7, r3, r1, r5
 8000e5c:	5dc7      	ldrb	r7, [r0, r7]
 8000e5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e62:	462f      	mov	r7, r5
 8000e64:	42bb      	cmp	r3, r7
 8000e66:	460d      	mov	r5, r1
 8000e68:	d9f4      	bls.n	8000e54 <_printf_i+0x110>
 8000e6a:	2b08      	cmp	r3, #8
 8000e6c:	d10b      	bne.n	8000e86 <_printf_i+0x142>
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	07df      	lsls	r7, r3, #31
 8000e72:	d508      	bpl.n	8000e86 <_printf_i+0x142>
 8000e74:	6923      	ldr	r3, [r4, #16]
 8000e76:	6861      	ldr	r1, [r4, #4]
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	bfde      	ittt	le
 8000e7c:	2330      	movle	r3, #48	@ 0x30
 8000e7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e86:	1b92      	subs	r2, r2, r6
 8000e88:	6122      	str	r2, [r4, #16]
 8000e8a:	f8cd a000 	str.w	sl, [sp]
 8000e8e:	464b      	mov	r3, r9
 8000e90:	aa03      	add	r2, sp, #12
 8000e92:	4621      	mov	r1, r4
 8000e94:	4640      	mov	r0, r8
 8000e96:	f7ff fee7 	bl	8000c68 <_printf_common>
 8000e9a:	3001      	adds	r0, #1
 8000e9c:	d14a      	bne.n	8000f34 <_printf_i+0x1f0>
 8000e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea2:	b004      	add	sp, #16
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	f043 0320 	orr.w	r3, r3, #32
 8000eae:	6023      	str	r3, [r4, #0]
 8000eb0:	4832      	ldr	r0, [pc, #200]	@ (8000f7c <_printf_i+0x238>)
 8000eb2:	2778      	movs	r7, #120	@ 0x78
 8000eb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	6831      	ldr	r1, [r6, #0]
 8000ebc:	061f      	lsls	r7, r3, #24
 8000ebe:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ec2:	d402      	bmi.n	8000eca <_printf_i+0x186>
 8000ec4:	065f      	lsls	r7, r3, #25
 8000ec6:	bf48      	it	mi
 8000ec8:	b2ad      	uxthmi	r5, r5
 8000eca:	6031      	str	r1, [r6, #0]
 8000ecc:	07d9      	lsls	r1, r3, #31
 8000ece:	bf44      	itt	mi
 8000ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8000ed4:	6023      	strmi	r3, [r4, #0]
 8000ed6:	b11d      	cbz	r5, 8000ee0 <_printf_i+0x19c>
 8000ed8:	2310      	movs	r3, #16
 8000eda:	e7ad      	b.n	8000e38 <_printf_i+0xf4>
 8000edc:	4826      	ldr	r0, [pc, #152]	@ (8000f78 <_printf_i+0x234>)
 8000ede:	e7e9      	b.n	8000eb4 <_printf_i+0x170>
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	f023 0320 	bic.w	r3, r3, #32
 8000ee6:	6023      	str	r3, [r4, #0]
 8000ee8:	e7f6      	b.n	8000ed8 <_printf_i+0x194>
 8000eea:	4616      	mov	r6, r2
 8000eec:	e7bd      	b.n	8000e6a <_printf_i+0x126>
 8000eee:	6833      	ldr	r3, [r6, #0]
 8000ef0:	6825      	ldr	r5, [r4, #0]
 8000ef2:	6961      	ldr	r1, [r4, #20]
 8000ef4:	1d18      	adds	r0, r3, #4
 8000ef6:	6030      	str	r0, [r6, #0]
 8000ef8:	062e      	lsls	r6, r5, #24
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	d501      	bpl.n	8000f02 <_printf_i+0x1be>
 8000efe:	6019      	str	r1, [r3, #0]
 8000f00:	e002      	b.n	8000f08 <_printf_i+0x1c4>
 8000f02:	0668      	lsls	r0, r5, #25
 8000f04:	d5fb      	bpl.n	8000efe <_printf_i+0x1ba>
 8000f06:	8019      	strh	r1, [r3, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6123      	str	r3, [r4, #16]
 8000f0c:	4616      	mov	r6, r2
 8000f0e:	e7bc      	b.n	8000e8a <_printf_i+0x146>
 8000f10:	6833      	ldr	r3, [r6, #0]
 8000f12:	1d1a      	adds	r2, r3, #4
 8000f14:	6032      	str	r2, [r6, #0]
 8000f16:	681e      	ldr	r6, [r3, #0]
 8000f18:	6862      	ldr	r2, [r4, #4]
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f7ff f967 	bl	80001f0 <memchr>
 8000f22:	b108      	cbz	r0, 8000f28 <_printf_i+0x1e4>
 8000f24:	1b80      	subs	r0, r0, r6
 8000f26:	6060      	str	r0, [r4, #4]
 8000f28:	6863      	ldr	r3, [r4, #4]
 8000f2a:	6123      	str	r3, [r4, #16]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f32:	e7aa      	b.n	8000e8a <_printf_i+0x146>
 8000f34:	6923      	ldr	r3, [r4, #16]
 8000f36:	4632      	mov	r2, r6
 8000f38:	4649      	mov	r1, r9
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	47d0      	blx	sl
 8000f3e:	3001      	adds	r0, #1
 8000f40:	d0ad      	beq.n	8000e9e <_printf_i+0x15a>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	079b      	lsls	r3, r3, #30
 8000f46:	d413      	bmi.n	8000f70 <_printf_i+0x22c>
 8000f48:	68e0      	ldr	r0, [r4, #12]
 8000f4a:	9b03      	ldr	r3, [sp, #12]
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	bfb8      	it	lt
 8000f50:	4618      	movlt	r0, r3
 8000f52:	e7a6      	b.n	8000ea2 <_printf_i+0x15e>
 8000f54:	2301      	movs	r3, #1
 8000f56:	4632      	mov	r2, r6
 8000f58:	4649      	mov	r1, r9
 8000f5a:	4640      	mov	r0, r8
 8000f5c:	47d0      	blx	sl
 8000f5e:	3001      	adds	r0, #1
 8000f60:	d09d      	beq.n	8000e9e <_printf_i+0x15a>
 8000f62:	3501      	adds	r5, #1
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	9903      	ldr	r1, [sp, #12]
 8000f68:	1a5b      	subs	r3, r3, r1
 8000f6a:	42ab      	cmp	r3, r5
 8000f6c:	dcf2      	bgt.n	8000f54 <_printf_i+0x210>
 8000f6e:	e7eb      	b.n	8000f48 <_printf_i+0x204>
 8000f70:	2500      	movs	r5, #0
 8000f72:	f104 0619 	add.w	r6, r4, #25
 8000f76:	e7f5      	b.n	8000f64 <_printf_i+0x220>
 8000f78:	08001145 	.word	0x08001145
 8000f7c:	08001156 	.word	0x08001156

08000f80 <memmove>:
 8000f80:	4288      	cmp	r0, r1
 8000f82:	b510      	push	{r4, lr}
 8000f84:	eb01 0402 	add.w	r4, r1, r2
 8000f88:	d902      	bls.n	8000f90 <memmove+0x10>
 8000f8a:	4284      	cmp	r4, r0
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	d807      	bhi.n	8000fa0 <memmove+0x20>
 8000f90:	1e43      	subs	r3, r0, #1
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	d008      	beq.n	8000fa8 <memmove+0x28>
 8000f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f9e:	e7f8      	b.n	8000f92 <memmove+0x12>
 8000fa0:	4402      	add	r2, r0
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	d100      	bne.n	8000faa <memmove+0x2a>
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fb2:	e7f7      	b.n	8000fa4 <memmove+0x24>

08000fb4 <_sbrk_r>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	4d06      	ldr	r5, [pc, #24]	@ (8000fd0 <_sbrk_r+0x1c>)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	f7ff fb54 	bl	800066c <_sbrk>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d102      	bne.n	8000fce <_sbrk_r+0x1a>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	b103      	cbz	r3, 8000fce <_sbrk_r+0x1a>
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	200001b0 	.word	0x200001b0

08000fd4 <memcpy>:
 8000fd4:	440a      	add	r2, r1
 8000fd6:	4291      	cmp	r1, r2
 8000fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fdc:	d100      	bne.n	8000fe0 <memcpy+0xc>
 8000fde:	4770      	bx	lr
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000fea:	4291      	cmp	r1, r2
 8000fec:	d1f9      	bne.n	8000fe2 <memcpy+0xe>
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <_realloc_r>:
 8000ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff4:	4607      	mov	r7, r0
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	460d      	mov	r5, r1
 8000ffa:	b921      	cbnz	r1, 8001006 <_realloc_r+0x16>
 8000ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001000:	4611      	mov	r1, r2
 8001002:	f7ff bc4d 	b.w	80008a0 <_malloc_r>
 8001006:	b92a      	cbnz	r2, 8001014 <_realloc_r+0x24>
 8001008:	f7ff fbde 	bl	80007c8 <_free_r>
 800100c:	4625      	mov	r5, r4
 800100e:	4628      	mov	r0, r5
 8001010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001014:	f000 f81a 	bl	800104c <_malloc_usable_size_r>
 8001018:	4284      	cmp	r4, r0
 800101a:	4606      	mov	r6, r0
 800101c:	d802      	bhi.n	8001024 <_realloc_r+0x34>
 800101e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001022:	d8f4      	bhi.n	800100e <_realloc_r+0x1e>
 8001024:	4621      	mov	r1, r4
 8001026:	4638      	mov	r0, r7
 8001028:	f7ff fc3a 	bl	80008a0 <_malloc_r>
 800102c:	4680      	mov	r8, r0
 800102e:	b908      	cbnz	r0, 8001034 <_realloc_r+0x44>
 8001030:	4645      	mov	r5, r8
 8001032:	e7ec      	b.n	800100e <_realloc_r+0x1e>
 8001034:	42b4      	cmp	r4, r6
 8001036:	4622      	mov	r2, r4
 8001038:	4629      	mov	r1, r5
 800103a:	bf28      	it	cs
 800103c:	4632      	movcs	r2, r6
 800103e:	f7ff ffc9 	bl	8000fd4 <memcpy>
 8001042:	4629      	mov	r1, r5
 8001044:	4638      	mov	r0, r7
 8001046:	f7ff fbbf 	bl	80007c8 <_free_r>
 800104a:	e7f1      	b.n	8001030 <_realloc_r+0x40>

0800104c <_malloc_usable_size_r>:
 800104c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001050:	1f18      	subs	r0, r3, #4
 8001052:	2b00      	cmp	r3, #0
 8001054:	bfbc      	itt	lt
 8001056:	580b      	ldrlt	r3, [r1, r0]
 8001058:	18c0      	addlt	r0, r0, r3
 800105a:	4770      	bx	lr

0800105c <_init>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	bf00      	nop
 8001060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001062:	bc08      	pop	{r3}
 8001064:	469e      	mov	lr, r3
 8001066:	4770      	bx	lr

08001068 <_fini>:
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106a:	bf00      	nop
 800106c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106e:	bc08      	pop	{r3}
 8001070:	469e      	mov	lr, r3
 8001072:	4770      	bx	lr
